myString <- "Hello, World!"
q()
print("hello guoshao")
?c
? '+'
?'%>%'
library(tidyverse)
?'%>%'
?c
yw <- c(98,65,87,95,84,75,57,78)
yw>75
show(yw)
"+" <- function(x,y){}
"+" <- function(x,y){x*y}
5+2
rm("+")
5+2
yw <- c(98,87,96,87,45,85,95,86)
min_score <- min(yw)
if(min_score>90)
{
message("全部为优")
}else if(min_score>80)
{
message("全部为良")
}else
{
message("并非")
}
yw <- c(98,87,96,87,45,85,95,86)
min_score <- min(yw)
if(min_score>40)
{
message("全部为优")
}else if(min_score>80)
{
message("全部为良")
}else
{
message("并非")
}
yw <- c(98,87,96,87,45,85,95,86)
min_score <- min(yw)
if(min_score>90)
{
message("全部为优")
}else if(min_score>40)
{
message("全部为良")
}else
{
message("并非")
}
ifelse(yw>=90,"优","良")
show(yw)
source("D:/Rtest/test2.R")
fib
source("D:/Rtest/test2.R")
fib2
source("D:/Rtest/test2.R")
fib3
source("D:/Rtest/test2.R")
fib3
source("D:/Rtest/test3.R")
x = 1:1e8
y = 2:(1e8+1)
z = integer(1e8)
system.time(z=x+y,gcFirst = TRUE)
system.time(z<-x+y,gcFirst = TRUE)
system.time(for(i in 1:1e8){z[i]<- x[i]+y[i]},gcFirst = TRUE)
system.time(for(i in 1:1e8){z[i]<- x[i]+y[i]},gcFirst = TRUE)
#函数调用
ce2fa <- function(ce)
{
fa <- 1.8*ce+32
return (fa)
}
ce2fa(0)
ce2fa(0:10)
ce2fa
c(1,3,9) %in% 1:3
x <- seq(1,100,by = 10)
y <- 2*x+10
xy <- cbind(x,y)
class(xy)
#函数画图
x <- seq(1,100,by = 10)
y <- 2*x+10
xy <- cbind(x,y)
class(xy)
plot(xy,
xlim = c(1,100),
ylim = c(0,230),
type = "o",col = "red")
#函数画图
x <- seq(1,100,by = 10)
y <- 2*x+10
xy <- cbind(x,y)
class(xy)
plot(xy,
xlim = c(1,100),
ylim = c(0,230),
type = "o",col = "red")
my_model = lm(y~x)
class(my_model)
plot(my_model)
#函数画图
x <- seq(1,100,by = 10)
y <- 2*x+10
xy <- cbind(x,y)
class(xy)
plot(xy,
xlim = c(1,100),
ylim = c(0,230),
type = "o",col = "red")
my_model = lm(y~x)
class(my_model)
op <- par(mfrow = c(2,2))
plot(my_model)
par(op)
#泛型函数 ——多态
interface <- function(x,y)
{
message("Single interface")
UseMethod("particular",y)
}
particular.classA <- function(x,y)
{
message("different behavior:classA")
}
particular.classB <- function(x,y)
{
message("different behavior:classB")
}
particular.default <- function(x,y)
{
message("different behavior:default")
}
x <- 1:10
y <- 1:20
class(y) <- "classA"
interface(x,y)
#泛型函数 ——多态
interface <- function(x,y)
{
message("Single interface")
UseMethod("particular",y)
}
particular.classA <- function(x,y)
{
message("different behavior:classA")
}
particular.classB <- function(x,y)
{
message("different behavior:classB")
}
particular.default <- function(x,y)
{
message("different behavior:default")
}
x <- 1:10
y <- 1:20
class(y) <- "classB"
interface(x,y)
#泛型函数 ——多态
interface <- function(x,y)
{
message("Single interface")
UseMethod("particular",y)
}
particular.classA <- function(x,y)
{
message("different behavior:classA")
}
particular.classB <- function(x,y)
{
message("different behavior:classB")
}
particular.default <- function(x,y)
{
message("different behavior:default")
}
x <- 1:10
y <- 1:20
class(y) <- NULL#classB/default
interface(x,y)
#定义自己的+
"+.onlyFirst" <- function(a,b)
{
return(a[1]+b[1])
}
a <- 1:5
a + 6:10
class(a) <- "onlyFirst"
a+6:10
1+1
Im
predict.lm
lm
print.lm
getAnywhere("print.lm")
x <- rnorm(100)
x
y <- 20
y <- 20*x+23+rnorm(100)
model <- lm(y~x)
View(model)
View(model)
View(op)
View(model)
library(devtools)
install.packages("devtools")
library(devtools)
packageVersion("devtools")
install.packages("simplin.zip",repos = NULL,type = "win.binary")
install.packages("D:\Rtest\simplin.zip,repos = NULL,type = "win.binary")
install.packages("D:\\Rtest\\simplin.zip,repos = NULL,type = "win.binary")
install.packages("D:\\Rtest\\simplin.zip",repos = NULL,type = "win.binary")
library(simplin)
x<-rnorm(100)
y<-20*x+23+rnorm(100)
model <- lin_reg(y~x)
model
save_model(model,"my_model_file.rda")
model11<-load_model("my_model_file.rda")
predict(model,data.frame(x=1:10))
x
y
library(simplin)
model1 <- lin_reg(y~x)
model1
model1.print()
model<-lm(y~x)
model
remove.packages("simplin")
library(simplin)
x
y
modell<- lin_reg(y~x)
modell
model
remove.packages("simplin")
library(simplin)
lin_reg()
lin_reg
Print
predict
lin_reg <- function(x, y) {
# 计算斜率和截距
X <- cbind(rep(1, length(x)), x)
b_hat <- solve(t(X) %*% X)%*%t(X)%*% y
Intercept <- b_hat[[1]]
Slope <- b_hat[[2]]
# 计算估计值和相关的参数
y_hat <- Slope * x + Intercept
SST <- sum((y - mean(y))^2)
SSR <- sum((y_hat - mean(y))^2)
SSE <- sum((y_hat - y)^2)
R_squared <- 1-SSE/SST
F_statistic <- SSR/(SSE/(length(x) - 2))
p_value <- pf(F_statistic, 1, length(x) - 2, lower.tail = FALSE)
# 赋值
model_info <- list(SST = SST,
SSR = SSR,
SSE = SSE,
R_squared = R_squared,
F_statistic = F_statistic,
p_value = p_value,
created_time = Sys.time())
model_value <- c(Intercept = Intercept, Slope = Slope)
model <- list(value = model_value, info = model_info)
attr(model, "class") <- "lin_reg"
attr(model, "info") <- model_info
attr(model, "value") <- model_value
return (model)
}
print.lin_reg <- function(model) {
model_value <- model$value
cat("李强伟编写的一元线性回归模型")
cat("\n截距: ", model_value[1])
cat("\n系数: ", model_value[2], "\n")
}
summary.lin_reg <- function(model) {
model_info <- model$info
model_value <- model$value
cat("\n=======================================\n\n")
cat("\n    李强伟编写的一元线性回归模型")
cat("\n=======================================")
cat("\nIntercept: ", model_value[1])
cat("\nSlope: ", model_value[2])
cat("\nFitted model: y=",  model_value[2], "*x+", model_value[1], sep = "")
cat("\nModel created @", as.character(model_info$created_time), sep = "")
cat("\n---------------------------------------")
cat("\ncoefficient of determination:", model_info$R_squared)
cat("\nF-statistic:",  model_info$F_statistic)
cat("\np-value:", model_info$p_value)
cat("\n=======================================\n\n")
invisible(model_info)
}
predict.lin_reg <- function(model, x) {
model_value <- model$value
return (model_value[2] * x + model_value[1])
}
x <- 1 : 10
y <- 3 : 12
model <- lin_reg(x, y)
model
summary
summar
summary(model)
remove.packages("simplin")
setwd("D:/R/simplin")
library(devtools)
library(roxygen2)
build()
install()
library(simplin)
x<-rnorm(100)
y<-12*x+8+rnorm(100)
lin_reg(x,y)
model<-lin_reg(x,y)
model
print(model)
predict(model,1:10)
lin_reg
lin_reg()
print
print()
predict
?predict
summary(model)
save(model,file="my_model_file.rda")
rm(model)
model
load("my_model_file.rda")
summary(model)
model
?lin_reg
?predict
predict.lin_reg(model,1:10)
?predict.lin_reg
?print.lin_reg
?summary.lin_reg
remove.packages("simplin")
load_all()
build()
install()
library(simplin)
rm(model)
model<-lin_reg(x,y)
model
predict(model,1:10)
print.lin_reg(model)
print(model)
summary(model)
